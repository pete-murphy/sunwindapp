import React, { Component } from "react"
import { BrowserRouter as Router, Route, Link } from "react-router-dom"
import styled from "styled-components"

import ClientForm from "./components/ClientForm"
import SystemForm from "./components/SystemForm"

const Container = styled.div`
  display: grid;
  grid-template-columns: 4fr 1fr;
  width: 100vw;
  height: 100vh;
  & > * {
    padding: 1rem;
    overflow: scroll;
  }
`
export const Main = styled.div`
  grid-column: 1 / 2;
`

export const Sidebar = styled.div`
  grid-column: 2 / 3;
  background-color: var(--night);
`

class App extends Component {
  constructor() {
    super()

    this.handleClientChange = this.handleClientChange.bind(this)
    this.handleClientToggle = this.handleClientToggle.bind(this)
    this.state = {
      client: {
        name: {
          last: "",
          first: ""
        },
        address: {
          number: "",
          street: "",
          town: "",
          zip: ""
        },
        financialInfo: {
          sRECMarketSector: 1,
          isCommercial: true,
          taxRate: 0.35
        },
        usageData: Array(12).fill(0),
        incentivePrograms: {
          fITC: true,
          sMART: false,
          sREC: true,
          mACRS: true,
          nantucketSolar: false,
          netMetering: true
        }
      },
      system: {
        arrays: [
          {
            moduleAmount: 120,
            moduleCapacity: 310,
            tilt: 45,
            azimuth: 156,
            arrayType: 1,
            costPerWatt: 0,
            losses: 14,
            // Output will be generated by PVWatts fetch
            output: []
          }
        ],
        defaultSettings: {
          moduleType: 1,
          // Fetch data from Boston TMY2
          lat: 41.68,
          lon: -69.96
        },
        hasError: true,
        hasSubmitted: false,
        totalSystemCost: 0
      }
    }
  }

  handleClientChange(value, name, category) {
    this.setState(
      ({ client }) =>
        category ? (client[category][name] = value) : (client[name] = value)
    )
  }

  handleClientToggle(name, category) {
    console.log("Then: ", JSON.stringify(this.state.client, null, 2))
    const client = { ...this.state.client }
    client[category][name] = !client[category][name]
    this.setState(({ client }) => client)
  }

  componentDidUpdate() {
    const { client } = this.state
    console.log("Now: ", JSON.stringify(client, null, 2))
  }

  render() {
    return (
      <Router>
        <Container>
          <Main>
            <Route
              path="/client"
              exact
              render={() => (
                <ClientForm
                  {...this.state.client}
                  handleChange={this.handleClientChange}
                  handleToggle={this.handleClientToggle}
                />
              )}
            />
            <Route
              path="/system"
              exact
              render={() => (
                <SystemForm
                  {...this.state.client}
                  handleChange={this.handleClientChange}
                  handleToggle={this.handleClientToggle}
                />
              )}
            />
          </Main>
          <Sidebar>
            <h2>Sidebar</h2>
          </Sidebar>
        </Container>
      </Router>
    )
  }
}

export default App
