import React, { Component } from "react"
import { BrowserRouter as Router, Route, NavLink } from "react-router-dom"
import styled from "styled-components"

import ClientInfo from "./components/forms/ClientInfo"
import ProjectInfo from "./components/forms/ProjectInfo"
import UsageData from "./components/forms/UsageData"
import SystemParams from "./components/forms/SystemParams"

import TestComponent from "./components/TestComponent"

import { fetchPVWatts } from "./functions/fetchPVWatts"
import { format, sum } from "./functions/library"

const Container = styled.div`
  display: grid;
  grid-template-columns: 4fr 1fr;
  width: 100vw;
  height: 100vh;
  & > * {
    padding: 1rem;
    overflow: scroll;
  }
`
const Main = styled.div``

const Sidebar = styled.div`
  background-color: var(--night);
`

const UL = styled.ul`
  list-style: none;
  margin: 0;
  padding: 0;
`

export const StyledNavLink = styled(NavLink)`
  text-decoration: none;
  color: var(--peach);
  transition: 0.2s all;
  &.active {
    color: var(--haus);
  }
`

const defaultTitle = "SunWind App"

class App extends Component {
  constructor() {
    super()

    this.addArray = this.addArray.bind(this)
    this.removeArray = this.removeArray.bind(this)
    this.handleChange = this.handleChange.bind(this)
    this.handleSubmit = this.handleSubmit.bind(this)
    this.state = {
      clientInfo: {
        name: {
          last: "Bojangles",
          first: "",
          uniqueID: ""
        },
        address: {
          line1: "",
          line2: "",
          town: "",
          zip: ""
        }
      },
      projectInfo: {
        isCommercial: false,
        incentivePrograms: {
          fITC: true,
          sMART: false,
          sREC: true,
          mACRS: true,
          nantucketSolar: false,
          netMetering: true
        },
        sRECMarketSector: 1,
        mACRSTaxRate: 0.35
      },
      usageData: Array(12).fill(0),
      system: {
        arrays: [
          {
            moduleAmount: 120,
            moduleCapacity: 310,
            tilt: 45,
            azimuth: 156,
            arrayType: 1,
            costPerWatt: 0,
            losses: 14,
            // Output will be generated by PVWatts fetch
            output: []
          }
        ],
        defaultSettings: {
          moduleType: 1,
          // This is data from Boston TMY2
          lat: 41.68,
          lon: -69.96
        }
      },
      arbitraryOutput: 0,
      systemCost: 0,
      hasError: true,
      hasSubmitted: false
    }
  }

  handleChange(change) {
    this.setState(() => ({ ...this.state, ...change }))
    this.setState(({ hasSubmitted }) => ({ hasSubmitted: false }))
  }

  handleSubmit() {
    this.setState(({ hasSubmitted }) => ({ hasSubmitted: true }))
    const { arrays } = this.state.system
    const { moduleType, lat, lon } = this.state.system.defaultSettings
    arrays.forEach((array, index) => {
      const {
        moduleAmount,
        moduleCapacity,
        tilt,
        azimuth,
        arrayType,
        losses
      } = array
      const systemCapacity = moduleAmount * moduleCapacity / 1000
      fetchPVWatts(
        systemCapacity,
        tilt,
        azimuth,
        arrayType,
        losses,
        lat,
        lon,
        moduleType
      ).then(acMonthly => {
        const { arrays } = { ...this.state.system }
        arrays[index].output = acMonthly
        this.setState(({ system }) => ({
          system: {
            ...system,
            arrays
          }
        }))
      })
    })
  }

  addArray() {
    const newArray = { ...[...this.state.system.arrays].pop() }
    this.setState(({ system }) => ({
      system: {
        ...system,
        arrays: [...system.arrays, newArray]
      }
    }))
  }

  removeArray() {
    this.setState(({ system }) => ({
      system: {
        ...system,
        arrays: [...system.arrays].slice(0, -1)
      }
    }))
  }

  componentDidMount() {
    document.title = defaultTitle
  }

  componentDidUpdate() {
    const lastName = this.state.clientInfo.name.last
    const address = this.state.clientInfo.address.line1
    lastName !== ""
      ? (document.title = lastName + (address !== "" ? `, ${address}` : ""))
      : (document.title = defaultTitle)
  }

  render() {
    return (
      <Router>
        <Container>
          <Main>
            <Route
              path="/client"
              exact
              render={() => (
                <ClientInfo
                  clientInfo={this.state.clientInfo}
                  handleChange={this.handleChange}
                />
              )}
            />
            <Route
              path="/project"
              exact
              render={() => (
                <ProjectInfo
                  projectInfo={this.state.projectInfo}
                  handleChange={this.handleChange}
                />
              )}
            />
            <Route
              path="/usage"
              exact
              render={() => (
                <UsageData
                  usageData={this.state.usageData}
                  handleChange={this.handleChange}
                />
              )}
            />
            <Route
              path="/system"
              exact
              render={() => (
                <SystemParams
                  system={this.state.system}
                  handleChange={this.handleChange}
                  removeArray={this.removeArray}
                  addArray={this.addArray}
                  handleSubmit={this.handleSubmit}
                  hasSubmitted={this.state.hasSubmitted}
                />
              )}
            />
            <Route path="/test" exact render={() => <TestComponent />} />
          </Main>
          <Sidebar>
            <UL>
              <li>
                <StyledNavLink to="/client">Client information</StyledNavLink>
              </li>
              <li>
                <StyledNavLink to="/project">Project settings</StyledNavLink>
              </li>
              <li>
                <StyledNavLink to="/usage">Usage data</StyledNavLink>
              </li>
              <li>
                <StyledNavLink to="/system">System parameters</StyledNavLink>
              </li>
              <li>
                <StyledNavLink to="/test">Test things</StyledNavLink>
              </li>
            </UL>
            {this.state.system.arrays[0].output.length && (
              <div style={{ color: "white" }}>
                <div>
                  {format(",")(
                    this.state.system.arrays.reduce(
                      (acc, curr) =>
                        acc + curr.output.reduce((acc, curr) => acc + curr, 0),
                      0
                    )
                  )}
                </div>
                <div>{format(",")(sum(this.state.usageData))}</div>
                <div>
                  {format("%")(
                    this.state.system.arrays.reduce(
                      (acc, curr) => acc + sum(curr.output),
                      0
                    ) / sum(this.state.usageData)
                  )}
                </div>
              </div>
            )}
          </Sidebar>
        </Container>
      </Router>
    )
  }
}

export default App
